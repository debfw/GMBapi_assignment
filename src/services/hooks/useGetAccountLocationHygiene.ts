/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/services/client";
import type {
  GetAccountLocationHygieneQueryResponse,
  GetAccountLocationHygienePathParams,
  GetAccountLocationHygiene400,
  GetAccountLocationHygiene401,
  GetAccountLocationHygiene404,
  GetAccountLocationHygiene500,
} from "../types/GetAccountLocationHygiene.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/services/client";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getAccountLocationHygieneQueryKey = (
  location_id: GetAccountLocationHygienePathParams["location_id"],
) =>
  [
    {
      url: "/external-api/gmb/account_location/hygiene/:location_id",
      params: { location_id: location_id },
    },
  ] as const;

export type GetAccountLocationHygieneQueryKey = ReturnType<
  typeof getAccountLocationHygieneQueryKey
>;

/**
 * @description Retrieves all account(location group) hygiene by {location_id}
 * @summary Get Account Location Hygiene
 * {@link /external-api/gmb/account_location/hygiene/:location_id}
 */
export async function getAccountLocationHygiene(
  location_id: GetAccountLocationHygienePathParams["location_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetAccountLocationHygieneQueryResponse,
    ResponseErrorConfig<
      | GetAccountLocationHygiene400
      | GetAccountLocationHygiene401
      | GetAccountLocationHygiene404
      | GetAccountLocationHygiene500
    >,
    unknown
  >({
    method: "GET",
    url: `/external-api/gmb/account_location/hygiene/${location_id}`,
    ...requestConfig,
  });
  return res.data;
}

export function getAccountLocationHygieneQueryOptions(
  location_id: GetAccountLocationHygienePathParams["location_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getAccountLocationHygieneQueryKey(location_id);
  return queryOptions<
    GetAccountLocationHygieneQueryResponse,
    ResponseErrorConfig<
      | GetAccountLocationHygiene400
      | GetAccountLocationHygiene401
      | GetAccountLocationHygiene404
      | GetAccountLocationHygiene500
    >,
    GetAccountLocationHygieneQueryResponse,
    typeof queryKey
  >({
    enabled: !!location_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getAccountLocationHygiene(location_id, config);
    },
  });
}

/**
 * @description Retrieves all account(location group) hygiene by {location_id}
 * @summary Get Account Location Hygiene
 * {@link /external-api/gmb/account_location/hygiene/:location_id}
 */
export function useGetAccountLocationHygiene<
  TData = GetAccountLocationHygieneQueryResponse,
  TQueryData = GetAccountLocationHygieneQueryResponse,
  TQueryKey extends QueryKey = GetAccountLocationHygieneQueryKey,
>(
  location_id: GetAccountLocationHygienePathParams["location_id"],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetAccountLocationHygieneQueryResponse,
        ResponseErrorConfig<
          | GetAccountLocationHygiene400
          | GetAccountLocationHygiene401
          | GetAccountLocationHygiene404
          | GetAccountLocationHygiene500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...queryOptions } = queryConfig;
  const queryKey =
    queryOptions?.queryKey ?? getAccountLocationHygieneQueryKey(location_id);

  const query = useQuery(
    {
      ...getAccountLocationHygieneQueryOptions(location_id, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetAccountLocationHygiene400
      | GetAccountLocationHygiene401
      | GetAccountLocationHygiene404
      | GetAccountLocationHygiene500
    >
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
