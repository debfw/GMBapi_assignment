/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/services/client";
import type {
  GetReviewSuggestionMutationRequest,
  GetReviewSuggestionMutationResponse,
  GetReviewSuggestion400,
  GetReviewSuggestion401,
  GetReviewSuggestion500,
} from "../types/GetReviewSuggestion.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/services/client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const getReviewSuggestionMutationKey = () =>
  [{ url: "/external-api/gmb/review/suggestion" }] as const;

export type GetReviewSuggestionMutationKey = ReturnType<
  typeof getReviewSuggestionMutationKey
>;

/**
 * @description Get AI-generated reply suggestions for a customer review
 * @summary Get review suggestion
 * {@link /external-api/gmb/review/suggestion}
 */
export async function getReviewSuggestion(
  data: GetReviewSuggestionMutationRequest,
  config: Partial<RequestConfig<GetReviewSuggestionMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const requestData = data;

  const res = await request<
    GetReviewSuggestionMutationResponse,
    ResponseErrorConfig<
      GetReviewSuggestion400 | GetReviewSuggestion401 | GetReviewSuggestion500
    >,
    GetReviewSuggestionMutationRequest
  >({
    method: "POST",
    url: `/external-api/gmb/review/suggestion`,
    data: requestData,
    ...requestConfig,
  });
  return res.data;
}

export function getReviewSuggestionMutationOptions(
  config: Partial<RequestConfig<GetReviewSuggestionMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const mutationKey = getReviewSuggestionMutationKey();
  return mutationOptions<
    GetReviewSuggestionMutationResponse,
    ResponseErrorConfig<
      GetReviewSuggestion400 | GetReviewSuggestion401 | GetReviewSuggestion500
    >,
    { data: GetReviewSuggestionMutationRequest },
    typeof mutationKey
  >({
    mutationKey,
    mutationFn: async ({ data }) => {
      return getReviewSuggestion(data, config);
    },
  });
}

/**
 * @description Get AI-generated reply suggestions for a customer review
 * @summary Get review suggestion
 * {@link /external-api/gmb/review/suggestion}
 */
export function useGetReviewSuggestion<TContext>(
  options: {
    mutation?: UseMutationOptions<
      GetReviewSuggestionMutationResponse,
      ResponseErrorConfig<
        GetReviewSuggestion400 | GetReviewSuggestion401 | GetReviewSuggestion500
      >,
      { data: GetReviewSuggestionMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<GetReviewSuggestionMutationRequest>> & {
      client?: typeof fetch;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey =
    mutationOptions.mutationKey ?? getReviewSuggestionMutationKey();

  return useMutation(
    {
      ...getReviewSuggestionMutationOptions(config),
      mutationKey,
      ...mutationOptions,
    } as unknown as UseMutationOptions,
    queryClient,
  ) as UseMutationOptions<
    GetReviewSuggestionMutationResponse,
    ResponseErrorConfig<
      GetReviewSuggestion400 | GetReviewSuggestion401 | GetReviewSuggestion500
    >,
    { data: GetReviewSuggestionMutationRequest },
    TContext
  >;
}
