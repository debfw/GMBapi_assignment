/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/services/client";
import type {
  GetAccountLocationProfileQueryResponse,
  GetAccountLocationProfilePathParams,
  GetAccountLocationProfile400,
  GetAccountLocationProfile401,
  GetAccountLocationProfile404,
  GetAccountLocationProfile500,
} from "../types/GetAccountLocationProfile.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/services/client";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getAccountLocationProfileQueryKey = (
  location_id: GetAccountLocationProfilePathParams["location_id"],
) =>
  [
    {
      url: "/external-api/gmb/account_location/profile/:location_id",
      params: { location_id: location_id },
    },
  ] as const;

export type GetAccountLocationProfileQueryKey = ReturnType<
  typeof getAccountLocationProfileQueryKey
>;

/**
 * @description Retrieves the profile of an account location based on the location_id parameter
 * @summary Get Account Location Profile
 * {@link /external-api/gmb/account_location/profile/:location_id}
 */
export async function getAccountLocationProfile(
  location_id: GetAccountLocationProfilePathParams["location_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const res = await request<
    GetAccountLocationProfileQueryResponse,
    ResponseErrorConfig<
      | GetAccountLocationProfile400
      | GetAccountLocationProfile401
      | GetAccountLocationProfile404
      | GetAccountLocationProfile500
    >,
    unknown
  >({
    method: "GET",
    url: `/external-api/gmb/account_location/profile/${location_id}`,
    ...requestConfig,
  });
  return res.data;
}

export function getAccountLocationProfileQueryOptions(
  location_id: GetAccountLocationProfilePathParams["location_id"],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getAccountLocationProfileQueryKey(location_id);
  return queryOptions<
    GetAccountLocationProfileQueryResponse,
    ResponseErrorConfig<
      | GetAccountLocationProfile400
      | GetAccountLocationProfile401
      | GetAccountLocationProfile404
      | GetAccountLocationProfile500
    >,
    GetAccountLocationProfileQueryResponse,
    typeof queryKey
  >({
    enabled: !!location_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getAccountLocationProfile(location_id, config);
    },
  });
}

/**
 * @description Retrieves the profile of an account location based on the location_id parameter
 * @summary Get Account Location Profile
 * {@link /external-api/gmb/account_location/profile/:location_id}
 */
export function useGetAccountLocationProfile<
  TData = GetAccountLocationProfileQueryResponse,
  TQueryData = GetAccountLocationProfileQueryResponse,
  TQueryKey extends QueryKey = GetAccountLocationProfileQueryKey,
>(
  location_id: GetAccountLocationProfilePathParams["location_id"],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetAccountLocationProfileQueryResponse,
        ResponseErrorConfig<
          | GetAccountLocationProfile400
          | GetAccountLocationProfile401
          | GetAccountLocationProfile404
          | GetAccountLocationProfile500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof fetch };
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...queryOptions } = queryConfig;
  const queryKey =
    queryOptions?.queryKey ?? getAccountLocationProfileQueryKey(location_id);

  const query = useQuery(
    {
      ...getAccountLocationProfileQueryOptions(location_id, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetAccountLocationProfile400
      | GetAccountLocationProfile401
      | GetAccountLocationProfile404
      | GetAccountLocationProfile500
    >
  > & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
