/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from "@/services/client";
import type {
  ReplyToReviewMutationRequest,
  ReplyToReviewMutationResponse,
  ReplyToReviewPathParams,
  ReplyToReview400,
  ReplyToReview401,
  ReplyToReview404,
  ReplyToReview500,
} from "../types/ReplyToReview.ts";
import type { RequestConfig, ResponseErrorConfig } from "@/services/client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { mutationOptions, useMutation } from "@tanstack/react-query";

export const replyToReviewMutationKey = () =>
  [{ url: "/reviews/:reviewId/reply" }] as const;

export type ReplyToReviewMutationKey = ReturnType<
  typeof replyToReviewMutationKey
>;

/**
 * @description Post a reply to a specific review
 * @summary Reply to review
 * {@link /reviews/:reviewId/reply}
 */
export async function replyToReview(
  reviewId: ReplyToReviewPathParams["reviewId"],
  data: ReplyToReviewMutationRequest,
  config: Partial<RequestConfig<ReplyToReviewMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const { client: request = fetch, ...requestConfig } = config;

  const requestData = data;

  const res = await request<
    ReplyToReviewMutationResponse,
    ResponseErrorConfig<
      ReplyToReview400 | ReplyToReview401 | ReplyToReview404 | ReplyToReview500
    >,
    ReplyToReviewMutationRequest
  >({
    method: "POST",
    url: `/reviews/${reviewId}/reply`,
    data: requestData,
    ...requestConfig,
  });
  return res.data;
}

export function replyToReviewMutationOptions(
  config: Partial<RequestConfig<ReplyToReviewMutationRequest>> & {
    client?: typeof fetch;
  } = {},
) {
  const mutationKey = replyToReviewMutationKey();
  return mutationOptions<
    ReplyToReviewMutationResponse,
    ResponseErrorConfig<
      ReplyToReview400 | ReplyToReview401 | ReplyToReview404 | ReplyToReview500
    >,
    {
      reviewId: ReplyToReviewPathParams["reviewId"];
      data: ReplyToReviewMutationRequest;
    },
    typeof mutationKey
  >({
    mutationKey,
    mutationFn: async ({ reviewId, data }) => {
      return replyToReview(reviewId, data, config);
    },
  });
}

/**
 * @description Post a reply to a specific review
 * @summary Reply to review
 * {@link /reviews/:reviewId/reply}
 */
export function useReplyToReview<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ReplyToReviewMutationResponse,
      ResponseErrorConfig<
        | ReplyToReview400
        | ReplyToReview401
        | ReplyToReview404
        | ReplyToReview500
      >,
      {
        reviewId: ReplyToReviewPathParams["reviewId"];
        data: ReplyToReviewMutationRequest;
      },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<ReplyToReviewMutationRequest>> & {
      client?: typeof fetch;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? replyToReviewMutationKey();

  return useMutation(
    {
      ...replyToReviewMutationOptions(config),
      mutationKey,
      ...mutationOptions,
    } as unknown as UseMutationOptions,
    queryClient,
  ) as UseMutationOptions<
    ReplyToReviewMutationResponse,
    ResponseErrorConfig<
      ReplyToReview400 | ReplyToReview401 | ReplyToReview404 | ReplyToReview500
    >,
    {
      reviewId: ReplyToReviewPathParams["reviewId"];
      data: ReplyToReviewMutationRequest;
    },
    TContext
  >;
}
